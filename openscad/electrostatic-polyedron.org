#+org_title: Poliedros basados en configuraciones de mínima energía entre vértices
#+latex_header: \usepackage[margin=2cm]{geometry}
#+latex_header: \usepackage{amsmath}
#+latex_header: \usepackage{xcolor}
#+latex_header: \usepackage[spanish]{babel}
#+latex_header_extra: \usepackage{listings}
#+latex_header_extra: \lstset{frame=single,columns=fixed,basicstyle=\small\ttfamily,breaklines=true,postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\color{red}\hookrightarrow\space}}}
#+author: Álvaro González Sotillo




* Resumen
Un conjunto de cargas eléctricas del mismo signo en un conductor tienden a repelerse, de forma que se sitúan en una configuración de mínima energía. Esta configuración sitúa las cargas en la superficie del conductor.

El siguiente programa de *OpenSCAD* simula el comportamiento de varias cargas encerradas en un conductor esférico. Tras encontrar la configuración de mínima energía, presenta el resultado como las aristas del cubrimiento convexo de las cargas, siendo este siempre un  poliedro convexo.

Los poliedros generados presentan un alto grado se simetría. La forma final alcanzada parece depender únicamente del número de vértices iniciales, excepto por algunas simetrías especulares.

* Cálculo del poliedro

** Determinación de la posición de los vértices

Para determinar la posición final de las cargas dentro de la esfera se realiza una simulación del movimiento de las cargas eléctricas dentro de la esfera, hasta que su posición se estabilice. Para ello se siguen los siguientes pasos:
1. Se inicializan las $N$ cargas a posiciones $c_i$ aleatorias del espacio.
2. Por cada carga $c_i$:
   1. La fuerza de repulsión con cada una de las otras cargas $c_j$ se calcula como \[f_{ij} = \frac{(c_i-c_j)}{|(c_i-c_j)|^2}\]
   2. Se suman dichas fuerzas para encontrar la fuerza total resultante $f_i$ sobre $c_i$. \[f_i = \sum_{j \neq i}^{N} f_{ij}\]
3. Por cada carga $c_i$:
   1. Se calcula la nueva posición de la carga $i$ como $c'_i = c_i + K \cdot f_i$. La constante $K$ debería representar factores como el intervalo de tiempo de cada paso de la simulación y las masas de las cargas, aunque en la práctica se ajusta a valores más altos para acelerar el resultado.
   2. La posición resultante se proyecta sobre una esfera de radio $r$ centrada en el origen \[c''_i = \frac{c'_i}{|c'_i|}\]
4. Las nuevas posiciones $c_i$ son los valores de $c''_i$
5. Se itera desde el paso 2 hasta alcanzar el criterio de terminación.
   1. El criterio de terminación del bucle es la estabilidad de las posiciones $c_i$, comparando un umbral $\epsilon$ con $$\sum_{i}^{N} (c''_i - c_i)$$

** Cubrimiento convexo de los vértices
Tras a primera parte del cálculo, se obtienen las posiciones $c_i$ de los vértices del poliedro. Cada triplete de puntos define 
- Una cara /exterior/ (o parte de una cara) de este poliedro.
- Un triángulo /interior/ que no forma parte del cubrimiento convexo de los vértices.

El algoritmo utilizado para determinar las aristas exteriores del poliedro es el siguiente:
1. Se parte del conjunto $T$ de todos los tripletes \[ \{ \{c_i,c_j,c_k\} | 1 \leq i < j < k \leq N \}\]
2. Por cada triplete $\{t_1,t_2,t_3\}$
   1. Se calcula la ecuación del plano que contiene sus tres puntos $ax + by + cy + d = 0$, siendo $\times$ el producto vectorial y $\cdot$ el producto escalar. \[(a,b,c) = (t_2-t_1) \times (t_3, t_1)\]  \[d = -(a,b,c)\cdot t_1\]
   2. Se sustituye cada punto $c_i$ en la ecuación del plano obtenida. Si el triplete pertenece al cubrimiento convexo, todos los resultados tendrán el mismo signo (o $0$).
   3. Si el triplete pertenece al cubrimiento, sus aristas $\{t_1,t_2\}$, $\{t_2,t_3\}$ y $\{t_3,t_1\}$ se añaden al conjunto $A$ de aristas exteriores.  

      
* Ejemplos de poliedros para $N=4..24$

#+caption[LIstado]: Generación de los sólidos de ejemplo
#+begin_src sh
#!/bin/sh -x
SCADFILE=./electrostatic-polyedron.scad

poliedro () {
  local N=$1
  openscad -o poliedro-$N.stl -D N=$N -D '$fn=50' -D '$fa=50' "$SCADFILE"
}
for i in $(seq 4 24)
do
  gecho Generando poliedro $i
  poliedro $i
done
#+end_src

Estos ficheros se han subido a [[http://www.sculpteo.com][Sculpteo.com]]
| Vértices | Sculpteo ID | Enlace                                        | nada                 |
|----------+-------------+-----------------------------------------------+----------------------|
|        4 | hwBvUUPS    | http://www.sculpteo.com/embed/design/hwBvUUPS | [[file:poliedro-4.png]]  |
|        5 | zywXZ2Vv    | http://www.sculpteo.com/embed/design/zywXZ2Vv | [[file:poliedro-5.png]]  |
|        6 | Hd6M6qdV    | http://www.sculpteo.com/embed/design/Hd6M6qdV | [[file:poliedro-6.png]]  |
|        7 | e3Z7njee    | http://www.sculpteo.com/embed/design/e3Z7njee | [[file:poliedro-7.png]]  |
|        8 | zF9bWGAC    | http://www.sculpteo.com/embed/design/zF9bWGAC | [[file:poliedro-8.png]]  |
|        9 | MTTJEqKN    | http://www.sculpteo.com/embed/design/MTTJEqKN | [[file:poliedro-9.png]]  |
|       10 | XHaVXMzy    | http://www.sculpteo.com/embed/design/XHaVXMzy | [[file:poliedro-10.png]] |
|       11 | cTu8ZKCy    | http://www.sculpteo.com/embed/design/cTu8ZKCy | [[file:poliedro-11.png]] |
|       12 | XHZQE7ST    | http://www.sculpteo.com/embed/design/XHZQE7ST | [[file:poliedro-12.png]] |
|       13 | A9fQg8jN    | http://www.sculpteo.com/embed/design/A9fQg8jN | [[file:poliedro-13.png]] |
|       14 | BhTtJYyY    | http://www.sculpteo.com/embed/design/BhTtJYyY | [[file:poliedro-14.png]] |
|       15 | kyYvU3Xd    | http://www.sculpteo.com/embed/design/kyYvU3Xd | [[file:poliedro-15.png]] |
|       16 | HZBAytyz    | http://www.sculpteo.com/embed/design/HZBAytyz | [[file:poliedro-16.png]] |
|       17 | BjZoe6GZ    | http://www.sculpteo.com/embed/design/BjZoe6GZ | [[file:poliedro-17.png]] |
|       18 | dPc6d8nD    | http://www.sculpteo.com/embed/design/dPc6d8nD | [[file:poliedro-18.png]] |
|       19 | PUog4ujR    | http://www.sculpteo.com/embed/design/PUog4ujR | [[file:poliedro-19.png]] |
|       20 | Hfhs8x45    | http://www.sculpteo.com/embed/design/Hfhs8x45 | [[file:poliedro-20.png]] |
|       21 | SJuWkeMm    | http://www.sculpteo.com/embed/design/SJuWkeMm | [[file:poliedro-21.png]] |
|       22 | ii3Bej6z    | http://www.sculpteo.com/embed/design/ii3Bej6z | [[file:poliedro-22.png]] |
|       23 | KtMCe5s6    | http://www.sculpteo.com/embed/design/KtMCe5s6 | [[file:poliedro-23.png]] |
|       24 | xxAz2juM    | http://www.sculpteo.com/embed/design/xxAz2juM | [[file:poliedro-24.png]] |
#+tblfm: $3='(concat "http://www.sculpteo.com/embed/design/" $2);::$4='(concat "[[file:poliedro-" $1 ".png]]")

www.sculpteo.com/embed/design/xxAz2juM

Los ficheros =stl= generados pueden visualizarse con *OpenSCAD* con un script como el siguiente

#+caption[LIstado]: Generación de las imágenes de ejemplo
#+begin_src java
STLFILE="poliedro-10.stl";
ANGLE=20;

rotate([ANGLE,0,0]){
     translate([0,0,0]) {
          import(STLFILE);
     }
}
#+end_src


#+caption[LIstado]: Generación de las imágenes de ejemplo
#+begin_src sh
#!/bin/sh -x
SCADFILE=./electrostatic-polyedron.scad

poliedro () {
  local N=$1
  openscad -o poliedro-$N.stl -D N=$N -D '$fn=50' -D '$fa=50' "$SCADFILE"
}
for i in $(seq 4 24)
do
  gecho Generando poliedro $i
  poliedro $i
done
#+end_src














* Implementación
  
** Características del lenguaje

El lenguaje de *OpenSCAD* es de tipo funcional, con funciones matemáticas básicas. 
 - No hay bucles de tipo /mientras/, y deben implementarse como funciones recurivas.
 - Distingue entre funciones (sin efectos laterales) y módulos (que crean efectivamente los sólidos).
   - Una consecuencia de que las funciones no tengan efectos laterales es la imposibilidad de trazar la ejecución de las mismas, ya que la instrución =log= se considera un efecto lateral.
 - Las funciones admiten parámetros por defecto.
 - Permite la construcción de listas de objetos, similares a /arrays/.
   - Los objetos pueden ser, entre otros, números y otras listas.
 - Un punto tridimensional se especifica como una lista de tres valores.
 - Ofrece facilidades para /for comprehensions/.
 

En la implementación se ha optado por utilizar las mínimas funciones del sistema.

** Cálculo de la posición final de las cargas

*OpenSCAD* no ofrece facilidades básicas como la distancia entre puntos tridimentsionales. Esto permite incluir esta función simple a modo de ejemplo de sintaxis de su lenguaje

 #+caption[Listado]: Distancia entre puntos tridimensionales (sqrt es una función incluída en OpenSCAD)
 #+begin_src java
  function distancia(a,b) = 
    let(
      dx = a[0]-b[0],
      dy = a[1]-b[1],
      dz = a[2]-b[2]
    )
    sqrt(dx*dx + dy*dy + dz*dz);
 #+end_src

A diferencia de la mayoría de lenguajes, *OpenSCAD* no ofrece bucles de tipo *mientras*. Estas construcciones deben emularse con funciones recursivas, que utilicen a su vez operador condicional ternario. En este ejemplo, se utiliza una función recursiva para recorrer una lista y acumular sus valores. puede verse también el uso de parámetros por defecto.

 #+caption[Listado]: Distancia entre puntos tridimensionales
 #+begin_src java
  function sumaPuntos(lista) = suma(lista,[0,0,0],0);
  function suma(lista,retorno=0,i=0) = 
    i>=len(lista) ? 
    retorno : 
    suma(lista,lista[i]+retorno,i+1); 
 #+end_src




Los bucles =for= siempre forman parte de un /for comprehension/, lo que implica que su resultado no puee ser un valor único, sino una lista con una posición por cada vuelta. Para conseguir acumular la distancia total entre dos listas de puntos es necesario, por tanto, un bucle =for= y un bucle =while= implementado como función recursiva.

 #+caption[Listado]: Suma de distancias entre dos listas de puntos
 #+begin_src java
  function distancias(puntos1, puntos2 ) =    [
       for( i =[0:1:len(puntos1)-1] )
           distancia(puntos1[i],puntos2[i])
  ];

  function errorTotal(puntos1,puntos2) = suma(distancias(puntos1,puntos2));
 #+end_src

Las fuerzas aplicadas en cada carga se calculan también como un /for comprehension/.

 #+caption[Listado]: Cálclo de las fuerzas que actúan sobre una carga
 #+begin_src java
  function fuerzasParaPunto( p, puntos ) = [
   for( punto = puntos )
     let(
        d = distancia(p,punto)
     )
     if( punto != p )  
       (p - punto)/(d*d)
  ];

  function modulo(vector) = distancia(vector,[0,0,0]);
 #+end_src



Este listado muestra la funcion principal de cálculo de posición de cada carga. La función =nuevoPuntoParaInteracion= determina la nueva posición de un punto, y la función =iteracion= utiliza la anterior para calcular la nueva posición de todos los puntos.

 #+caption[Listado]: Cálculo de las nuevas posiciones de las cargas a partir de las actuales
 #+begin_src java
  function normaliza( p, radio ) = radio * p / modulo(p);
    
  function nuevoPuntoParaIteracion(p,puntos, radio=100) = 
     let(
        fuerzas = fuerzasParaPunto( p, puntos ),
        factorDeAmpliacion = radio*radio,
        fuerza = sumaPuntos(fuerzas)*factorDeAmpliacion,
        nuevoPunto = p + fuerza
     )
     normaliza(nuevoPunto,radio);

  function iteracion(puntos, radio=100) = [
     for( i = puntos) nuevoPuntoParaIteracion(i,puntos,radio)
  ];
 #+end_src

La función =iteraCalculoDePuntos= realiza un bucle =while= (nuevamente, en forma de función recursiva) hasta que la diferencia de posición entre un paso y el anterior es menor de un umbral. Por seguridad, se incluye también un límite en el número máximo de iteraciones.

 #+caption[Listado]: Bucle hasta no superar una diferencia mínima o un número máximo de iteraciones
 #+begin_src java
  function iteraCalculoDePuntos( puntos, radio=100, errorMaximo=0.01, contador=0, iteracionesMaximas=1000 ) =
    let( 
      siguientesPuntos = iteracion(puntos,radio), 
      error = errorTotal(siguientesPuntos, puntos)
    )
    error <= errorMaximo || contador >= iteracionesMaximas ? 
          siguientesPuntos : 
          iteraCalculoDePuntos(siguientesPuntos, radio, errorMaximo, contador+1,iteracionesMaximas);
 #+end_src

Tan solo resta comenzar con un número determinado de puntos aleatorios e iterarlos hasta conseguir llegar al equilibrio.

 #+caption[Listado]: Cálculo de los vértices de un poliedro
 #+begin_src java
  function puntoAleatorio() = rands(-1000,1000,3);

  function puntosAleatorios(n) = [for( i=[0:n-1] ) puntoAleatorio()];

  function verticesPoliedroElectrostatico(n) = iteraCalculoDePuntos(puntosAleatorios(n));
 #+end_src

** Cálculo del cubrimiento convexo

Comenzamos definiendo primitivas básicas para el trabajo con vectores: producto escalar y vectorial. El producto vectorial ya está implementado en *OpenSCAD* (función =cross=), pero se incluye aquí por completitud del algoritmo.

 #+caption[Listado]: Cálculo del producto escalar y vectorial
 #+begin_src java
  function productoEscalar(v1,v2) =
    suma( [ 
      for(i=[0:len(v1)-1]) v1[i]*v2[i] 
    ] );

  function productoVectorial(v1,v2) = [
      v1[1]*v2[2] - v1[2]*v2[1],
      - v1[0]*v2[2] + v1[2]*v2[0],
      v1[0]*v2[1] - v1[1]*v2[0]
  ];
#+end_src

Utilizando los productos, podemos definir la ecuación del plano que pasa por tres puntos, y una función que determina si un punto pertenece a un plano, o si queda a un lado o a otro del mismo.

 #+caption[Listado]: Determinación de la ecuación de un plano por tres ypuntos, y su aplicación a un punto
 #+begin_src java
  function ecuacionDePlanoPorTresPuntos(p1,p2,p3) =
    let(
      puntoEnElPlano = p1,
      vector1 = p2-p1,
      vector2 = p3-p1,
      normal = productoVectorial(vector1,vector2),
      d = -productoEscalar(puntoEnElPlano,normal)
    )
    [normal,d];

  function ecuacionDePlanoPorTresPuntosEnLista(lista) =
     ecuacionDePlanoPorTresPuntos(lista[0],lista[1],lista[2]);

  function sustituyeEcuacionPlano(ecuacion,punto) =
      productoEscalar(ecuacion[0],punto) + ecuacion[1];
#+end_src


Las siguientes funciones resumen el cálculo de aristas ocultas. Necesitan varias funciones de utilidad definidas posteriormente.

 #+caption[Listado]: Cálculo de aristas exteriores
 #+begin_src java
  function quitarAristasDuplicadas(aristas,ret=[],indice=0) = 
    indice >= len(aristas) ?
    ret : 
    (
        let( 
          a1 = aristas[indice],
          a2 = [a1[1],a1[0]]
        )
        contenidoEnLista(a1,ret) || contenidoEnLista(a2,ret) ?
        quitarAristasDuplicadas(aristas,ret,indice+1) :
        quitarAristasDuplicadas(aristas,agregarALista(ret,a1),indice+1)
    );
      
  function aristasExteriores(vertices) =
      let(
        n = len(vertices),
        indicesTriangulos = todosLosTripletesHasta(n)
      )
      aplanaUnNivel([
          for( indices = indicesTriangulos )
              if( todosLosPuntosAlMismoLado(indices,vertices) )
                  aristasDeTriangulo(indices)
      ]);      
    
  function todosLosPuntosAlMismoLado(triangulo,puntos,tolerancia=1) = 
     let(
        ecuacionPlano = ecuacionDePlanoPorTresPuntosEnLista(trianguloConIndicesDeVertices(triangulo,puntos)),
        lados = [
          for(punto=puntos)
              sustituyeEcuacionPlano(ecuacionPlano,punto)
        ],
        ladosNegados = [for(lado=lados) -lado]
     )
     todosMayoresOIgualesQue(lados,-tolerancia) ||
          todosMayoresOIgualesQue(ladosNegados,-tolerancia);

#+end_src

algoalgoalgoalgoalgoalgo  algoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoa lgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgo algoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgo algoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoa lgoalgoalgoalgoalgoalgoalgoalgo algoalgoalgoalgoalgoalgoa lgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgoalgo algoalgoalgoalgoalgo

 #+caption[Listado]: Funciones auxiliares para el cálculo de aristas exteriores
 #+begin_src java
  function todosMayoresOIgualesQue(valores,umbral) =
      let(
          comprobaciones = [
              for( v=valores )
                  v - umbral >= 0 ?
                  1 :
                  0
          ]
      )
      suma(comprobaciones) == len(valores);
            
            
    
  function todosLosTripletesHasta(n) = [
        for( i=[0:n-3] , j=[i+1:n-2] , k=[j+1:n-1] ) [i,j,k]
  ];
  
  function trianguloConIndicesDeVertices(indices,vertices) =
    [vertices[indices[0]], vertices[indices[1]], vertices[indices[2]]];
  
  function aristasDeTriangulo(triplete) = [
        [triplete[0],triplete[1]],
        [triplete[1],triplete[2]],
        [triplete[2],triplete[0]]
  ];    
  
  // SI UNA LISTA ES [[[a,b],[c,d]],[[e,f],[g,h]]] la deja en [[a,b],[c,d],[e,f],[g,h]]
  function aplanaUnNivel(lista) = [
        for( a = lista , b = a ) b
  ];
      
     
  function contenidoEnLista(v,lista,indice=0) =
    lista[indice] == v ? 
    true : (
      indice>=len(lista) ?
      false :
      contenidoEnLista(v,lista,indice+1)
    );
     
  function agregarALista(lista,valor) = [
        for(i=[0:len(lista)])
            i < len(lista) ? lista[i] : valor
  ];
#+end_src

*** Renderización del poliedros
Hasta el momento, sólo se ha realizado el cálculo de los vértices del poliedro, pero *OpenSCAD* no ha renderizado ninguna forma.

Para que *OpenSCAD* genere algún volumen hay que utilizar un =module= predefinido o uno propio construido a base de los ya existentes.

En este caso, cada arista se renderiza como un cilindro rematado por esferas.

 #+caption[Listado]: Generación de un poliedro
 #+begin_src java
  N = 20;      
  vertices = verticesPoliedroElectrostatico(N);
  aristas = aristasExteriores(vertices);
  aristasSinDuplicados = quitarAristasDuplicadas(aristas);

  module palo(a,b,r){
      hull(){
          translate(a) sphere(r);
          translate(b) sphere(r);
      }
  }

  module aristasAPalos(aristas,vertices,ancho=10){
      for( i=aristas )
          palo(vertices[i[0]],vertices[i[1]],ancho);
  }    

  aristasAPalos(aristasSinDuplicados,vertices,5);
#+end_src




